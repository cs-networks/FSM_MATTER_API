# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.action import Action  # noqa: F401,E501
from swagger_server.models.link import Link  # noqa: F401,E501
from swagger_server.models.sub_entity import SubEntity  # noqa: F401,E501
from swagger_server import util


class SubEntity(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, href: str=None, rel: List[str]=None, _class: List[str]=None, properties: object=None, entities: List[SubEntity]=None, actions: List[Action]=None, links: List[Link]=None):  # noqa: E501
        """SubEntity - a model defined in Swagger

        :param href: The href of this SubEntity.  # noqa: E501
        :type href: str
        :param rel: The rel of this SubEntity.  # noqa: E501
        :type rel: List[str]
        :param _class: The _class of this SubEntity.  # noqa: E501
        :type _class: List[str]
        :param properties: The properties of this SubEntity.  # noqa: E501
        :type properties: object
        :param entities: The entities of this SubEntity.  # noqa: E501
        :type entities: List[SubEntity]
        :param actions: The actions of this SubEntity.  # noqa: E501
        :type actions: List[Action]
        :param links: The links of this SubEntity.  # noqa: E501
        :type links: List[Link]
        """
        self.swagger_types = {
            'href': str,
            'rel': List[str],
            '_class': List[str],
            'properties': object,
            'entities': List[SubEntity],
            'actions': List[Action],
            'links': List[Link]
        }

        self.attribute_map = {
            'href': 'href',
            'rel': 'rel',
            '_class': 'class',
            'properties': 'properties',
            'entities': 'entities',
            'actions': 'actions',
            'links': 'links'
        }
        self._href = href
        self._rel = rel
        self.__class = _class
        self._properties = properties
        self._entities = entities
        self._actions = actions
        self._links = links

    @classmethod
    def from_dict(cls, dikt) -> 'SubEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SubEntity of this SubEntity.  # noqa: E501
        :rtype: SubEntity
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self) -> str:
        """Gets the href of this SubEntity.


        :return: The href of this SubEntity.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href: str):
        """Sets the href of this SubEntity.


        :param href: The href of this SubEntity.
        :type href: str
        """

        self._href = href

    @property
    def rel(self) -> List[str]:
        """Gets the rel of this SubEntity.


        :return: The rel of this SubEntity.
        :rtype: List[str]
        """
        return self._rel

    @rel.setter
    def rel(self, rel: List[str]):
        """Sets the rel of this SubEntity.


        :param rel: The rel of this SubEntity.
        :type rel: List[str]
        """

        self._rel = rel

    @property
    def _class(self) -> List[str]:
        """Gets the _class of this SubEntity.


        :return: The _class of this SubEntity.
        :rtype: List[str]
        """
        return self.__class

    @_class.setter
    def _class(self, _class: List[str]):
        """Sets the _class of this SubEntity.


        :param _class: The _class of this SubEntity.
        :type _class: List[str]
        """

        self.__class = _class

    @property
    def properties(self) -> object:
        """Gets the properties of this SubEntity.


        :return: The properties of this SubEntity.
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties: object):
        """Sets the properties of this SubEntity.


        :param properties: The properties of this SubEntity.
        :type properties: object
        """

        self._properties = properties

    @property
    def entities(self) -> List[SubEntity]:
        """Gets the entities of this SubEntity.


        :return: The entities of this SubEntity.
        :rtype: List[SubEntity]
        """
        return self._entities

    @entities.setter
    def entities(self, entities: List[SubEntity]):
        """Sets the entities of this SubEntity.


        :param entities: The entities of this SubEntity.
        :type entities: List[SubEntity]
        """

        self._entities = entities

    @property
    def actions(self) -> List[Action]:
        """Gets the actions of this SubEntity.


        :return: The actions of this SubEntity.
        :rtype: List[Action]
        """
        return self._actions

    @actions.setter
    def actions(self, actions: List[Action]):
        """Sets the actions of this SubEntity.


        :param actions: The actions of this SubEntity.
        :type actions: List[Action]
        """

        self._actions = actions

    @property
    def links(self) -> List[Link]:
        """Gets the links of this SubEntity.


        :return: The links of this SubEntity.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links: List[Link]):
        """Sets the links of this SubEntity.


        :param links: The links of this SubEntity.
        :type links: List[Link]
        """

        self._links = links
