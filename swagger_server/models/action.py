# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.field import Field  # noqa: F401,E501
from swagger_server import util


class Action(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, _class: List[str]=None, name: str=None, method: str=None, href: str=None, title: str=None, type: str=None, fields: List[Field]=None):  # noqa: E501
        """Action - a model defined in Swagger

        :param _class: The _class of this Action.  # noqa: E501
        :type _class: List[str]
        :param name: The name of this Action.  # noqa: E501
        :type name: str
        :param method: The method of this Action.  # noqa: E501
        :type method: str
        :param href: The href of this Action.  # noqa: E501
        :type href: str
        :param title: The title of this Action.  # noqa: E501
        :type title: str
        :param type: The type of this Action.  # noqa: E501
        :type type: str
        :param fields: The fields of this Action.  # noqa: E501
        :type fields: List[Field]
        """
        self.swagger_types = {
            '_class': List[str],
            'name': str,
            'method': str,
            'href': str,
            'title': str,
            'type': str,
            'fields': List[Field]
        }

        self.attribute_map = {
            '_class': 'class',
            'name': 'name',
            'method': 'method',
            'href': 'href',
            'title': 'title',
            'type': 'type',
            'fields': 'fields'
        }
        self.__class = _class
        self._name = name
        self._method = method
        self._href = href
        self._title = title
        self._type = type
        self._fields = fields

    @classmethod
    def from_dict(cls, dikt) -> 'Action':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Action of this Action.  # noqa: E501
        :rtype: Action
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _class(self) -> List[str]:
        """Gets the _class of this Action.


        :return: The _class of this Action.
        :rtype: List[str]
        """
        return self.__class

    @_class.setter
    def _class(self, _class: List[str]):
        """Sets the _class of this Action.


        :param _class: The _class of this Action.
        :type _class: List[str]
        """

        self.__class = _class

    @property
    def name(self) -> str:
        """Gets the name of this Action.


        :return: The name of this Action.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Action.


        :param name: The name of this Action.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def method(self) -> str:
        """Gets the method of this Action.


        :return: The method of this Action.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method: str):
        """Sets the method of this Action.


        :param method: The method of this Action.
        :type method: str
        """

        self._method = method

    @property
    def href(self) -> str:
        """Gets the href of this Action.


        :return: The href of this Action.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href: str):
        """Sets the href of this Action.


        :param href: The href of this Action.
        :type href: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")  # noqa: E501

        self._href = href

    @property
    def title(self) -> str:
        """Gets the title of this Action.


        :return: The title of this Action.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Action.


        :param title: The title of this Action.
        :type title: str
        """

        self._title = title

    @property
    def type(self) -> str:
        """Gets the type of this Action.


        :return: The type of this Action.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Action.


        :param type: The type of this Action.
        :type type: str
        """

        self._type = type

    @property
    def fields(self) -> List[Field]:
        """Gets the fields of this Action.


        :return: The fields of this Action.
        :rtype: List[Field]
        """
        return self._fields

    @fields.setter
    def fields(self, fields: List[Field]):
        """Sets the fields of this Action.


        :param fields: The fields of this Action.
        :type fields: List[Field]
        """

        self._fields = fields
